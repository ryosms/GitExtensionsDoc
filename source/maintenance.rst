.. index::
   single: Maintenance

Maintenance
===========

この章では、リポジトリをメンテナンスするいくつかの機能について説明します。

.. index::
   single: Maintenance; Gitデータベースの圧縮

Gitデータベースの圧縮
---------------------

Gitはたくさんのファイルを作成します。
``Gitデータベースの圧縮`` を実行することで、リポジトリを構成するすべての小さなファイルをひとつの大きなファイルにまとめることができます。
Gitはまた、15日経過した未使用のオブジェクトをGCします。
多くの小さなファイルによってデータベースが断片化されている場合、データベースを圧縮することでパフォーマンスを向上させることができます。

.. image:: /images/compress_database.png

.. index::
   single: Maintenance; 消してしまったオブジェクトの復元

消してしまったオブジェクトの復元
--------------------------------

間違ってコミットを消してしまった場合、 ``消してしまったオブジェクトの復元`` 機能を使用して回復できるかもしれません。
ダイアログは、すべての宙ぶらりんのオブジェクトを表示するので、それらを検討してリカバリすることができます。

.. image:: /images/recover_objects.png

通常、Gitはリポジトリから何かを削除しても、すぐにはファイルを削除しません。
これが、必要に応じて削除したアイテムを復元することができることの理由です。
Gitは、削除されたアイテムが15日以上経過後に、 ``Gitデータベースの圧縮`` 処理を行った場合にそれらを削除します。

.. image:: /images/verify_database.png

失われたファイルを探すのに役立つ、いくつかの機能があります。
デフォルトでは、Git Extensionsはコミットのみを表示します。
すべての項目を表示するには、 ``コミットのみ表示`` のオプションのチェックを外すだけです。
その他のオプションは、チェックを切り替えることで、表示結果の数が変化します。
コンテンツを確認するには、項目をダブルクリックします。
回復したいアイテムを見つけたら、``選択オブジェクトにタグを作成`` を使用してタグ付けができます。

.. note::
	訳注: Git Extensionsを日本語で使用していると、ダイアログの表示が一部崩れます(Git Extensions 2.44時点)

Git Extensionsでは、すべての失われたオブジェクトにタグを付けることも可能です。
そうすれば、すべての失われたオブジェクトが再び表示されるようになるため、回復したいコミットを探すのが楽になります。
``全コミットにタグを作成`` ボタンを使用してコミットを回復した後は、 ``LOST_AND_FOUNDタグを全削除`` ボタンですべてのタグを削除できます。

.. image:: /images/lost_found.png

.. index::
   single: Maintenance; ユーザ名の修正

ユーザ名の修正
--------------

誰かが、間違って誤ったユーザ名でコミットをしてしまった場合、 ``.mailmapファイルの編集`` 機能を使用して修正できます。
``.mailmap`` ファイルが設定されている場合、Gitはそのメールアドレスに対応したユーザ名を使用します。

.. image:: /images/mail_map.png

コミットのメールアドレスを使用してユーザ名を修正する場合:

.. code-block:: text

    Proper Name <commit@email.xx>

コミットのメールアドレスを使用してメールアドレスを修正する場合:

.. code-block:: text
    
    <proper@email.xx> <commit@email.xx>

コミットのメールアドレスを使用してメールアドレスとユーザ名を修正する場合:

.. code-block:: text

    Proper Name <proper@email.xx> <commit@email.xx>

コミットのユーザ名とメールアドレスを使用してメールアドレスとユーザ名を修正する場合:	

.. code-block:: text

    Proper Name <proper@email.xx> Commit Name <commit@email.xx>

.. index::
   single: Maintenance; ファイルの無視

ファイルの無視
--------------

Gitは、作業ディレクトリに存在するすべてのファイルを追跡します。
通常は、コンパイラによって作成されたすべてのファイルを除外したくはありません。
``.gitignore`` ファイルに無視したいファイルを追加することができます。
ワイルドカードと正規表現を使用することができます。
すべてのエントリは大文字と小文字が区別されます。
``デフォルトの無視ファイル`` ボタンによって、Visual Studioを使用している際に無視されるべきパターンが追加されます。

.. image:: /images/gitignore.png

構文の簡単な概要:

+-----+---------------------------------------------------------------------------------------------------------------------------------+
|#    | ``#`` で開始された行は、コメントとして扱われます。                                                                              |
+-----+---------------------------------------------------------------------------------------------------------------------------------+
|!    | ``!`` で開始された行は、除外パターンになります。                                                                                |
+-----+---------------------------------------------------------------------------------------------------------------------------------+
|[Dd] | ``[..]`` で囲まれた文字のうち、1文字がマッチする必要があります。                                                                |
+-----+---------------------------------------------------------------------------------------------------------------------------------+
|\*   | ワイルドカード                                                                                                                  |
+-----+---------------------------------------------------------------------------------------------------------------------------------+
|/    | 先頭のスラッシュはパス名の先頭にマッチします。                                                                                  |
|     | 例えば、 ``/*.c`` は ``cat-file.c`` にマッチしますが、 ``mozilla-sha1/sha1.c`` にはマッチしません。                             |
+-----+---------------------------------------------------------------------------------------------------------------------------------+
|/    | パターンがスラッシュで終了している場合、以下の説明で除去されますが、ディレクトリのみとマッチします。言い換えると、              |
|     | ``foo/`` はfooというディレクトリと、その配下のパスと一致しますが、fooという通常のファイルやシンボリックリンクとは一致しません。 |
|     | (これは、gitの中で、pathspecの一般的な動作の仕方と一致しています)                                                               |
+-----+---------------------------------------------------------------------------------------------------------------------------------+

`より詳細な情報はここを参照してください <http://www.kernel.org/pub/software/scm/git/docs/gitignore.html>`_.
