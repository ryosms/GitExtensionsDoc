.. index::
   single: Appendix

Appendix
========

.. index::
   single: Appendix; Gitのチートシート

Gitのチートシート
-----------------

+-----------------------------------------------------------------+---------------------------------------------------------+
|操作                                                             | コマンド                                                |
+=================================================================+=========================================================+
|新規リポジトリの作成                                             | `$ git init`                                            |
+-----------------------------------------------------------------+---------------------------------------------------------+
|共有リポジトリの作成                                             | `$ git init –-bare –-shared=all`                        |
+-----------------------------------------------------------------+---------------------------------------------------------+
|リポジトリのクローン                                             | `$ git clone c:/demo1 c:/demo2`                         |
+-----------------------------------------------------------------+---------------------------------------------------------+
|ブランチのチェックアウト                                         | `$ git checkout <name>`                                 |
+-----------------------------------------------------------------+---------------------------------------------------------+
|ブランチの作成                                                   | `$ git branch <name>`                                   |
+-----------------------------------------------------------------+---------------------------------------------------------+
|ブランチの削除                                                   | `$ git branch -d <name>`                                |
+-----------------------------------------------------------------+---------------------------------------------------------+
|(指定のブランチから現在のブランチに)マージ                       | `$ git merge PDC`                                       |
+-----------------------------------------------------------------+---------------------------------------------------------+
|競合の解消                                                       | `$ git mergetool`                                       |
|(マージツールを設定していない場合は ``--tool=kdiff3`` を追加)    | `$ git commit`                                          |
+-----------------------------------------------------------------+---------------------------------------------------------+
|タグの作成                                                       | `$ git tag <name>`                                      |
+-----------------------------------------------------------------+---------------------------------------------------------+
|ファイル／変更の追加 ( ``.`` は全ファイルが対象)                 | `$ git add .`                                           |
+-----------------------------------------------------------------+---------------------------------------------------------+
|追加されたファイル／変更のコミット                               | `$ git commit –m "Enter commit message" `               |
|( 最後のコミットを修正する場合は ``--amend`` )                   |                                                         |
+-----------------------------------------------------------------+---------------------------------------------------------+
|変更の破棄                                                       | `$ git reset --hard`                                    |
+-----------------------------------------------------------------+---------------------------------------------------------+
|パッチの作成 ( ``-M`` でリネームを検出、 ``–C`` でコピーを検出)  | `$ git format-patch –M –C origin`                       |
+-----------------------------------------------------------------+---------------------------------------------------------+
|マージせずにパッチを適用                                         | `$ git apply c:/patch/0001-employee.patch`              |
+-----------------------------------------------------------------+---------------------------------------------------------+
|パッチをマージ                                                   | `$ git am -–3way –-signoff c:/patch/0001-employee.patch`|
+-----------------------------------------------------------------+---------------------------------------------------------+
|競合の解消                                                       | | `$ git mergetool`                                     |
|(マージツールを設定していない場合は ``--tool=kdiff3`` を追加)    | | `$ it am –-3way -–resolved`                           |
+-----------------------------------------------------------------+---------------------------------------------------------+
|変更の一時退避                                                   | `$ git stash`                                           |
+-----------------------------------------------------------------+---------------------------------------------------------+
|退避していた変更の適用                                           | `$ git stash apply`                                     |
+-----------------------------------------------------------------+---------------------------------------------------------+
|変更のPull (マージではなくリベースする場合は ``--rebase`` を追加)| `$ git pull c:/demo1 master`                            |
+-----------------------------------------------------------------+---------------------------------------------------------+
|競合の解消                                                       | | `$ git mergetool`                                     |
|(マージツールを設定していない場合は ``--tool=kdiff3`` を追加)    | | `$ git commit`                                        |
+-----------------------------------------------------------------+---------------------------------------------------------+
|変更のPush (ブランチで $ git push c:/demo1 master master:<new>)  | `$ git push c:/demo1`                                   |
+-----------------------------------------------------------------+---------------------------------------------------------+
|Blame                                                            | `$ git blame –M –w <filename>`                          |
+-----------------------------------------------------------------+---------------------------------------------------------+
|Help                                                             | `$ git <command> --help`                                |
+-----------------------------------------------------------------+---------------------------------------------------------+

Gitによって使われるデフォルトの名前です。

+-------------------------------------------------------+
|Default names                                          |
+============+==========================================+
|master      | デフォルトのブランチ名                   |
+------------+------------------------------------------+
|origin      | デフォルトのupstreamのリポジトリ         |
+------------+------------------------------------------+
|HEAD        | 現在のブランチ                           |
+------------+------------------------------------------+
|HEAD^       | HEADの親                                 |
+------------+------------------------------------------+
|HEAD~4      | HEADの4世代前の親                        |
+------------+------------------------------------------+

.. index::
   single: Appendix; Menu map


Menu map
--------

下の画像はGit Extensions(v2.43)のメニュー構造を一覧にしたものです。

.. image:: /images/development/GitExt_Menu_Structure_2.43.png
