.. index::
   single: Commit

Commit
======

コミットは、いつくかの追加の情報を含んだ、変更をまとめたものです。
すべてのコミットは以下の情報を含んでいます。

* 変更
* コミッターの名前とメールアドレス
* コミットした日時
* コミットメッセージ
* 強く暗号化されたSHA1ハッシュ

各コミットにより、ソースの新しいリビジョンが作成されます。
リビジョンはファイルごとに追跡はされず、各変更によって完全なソースの新しいリビジョンが作成されます。
伝統的なソース管理システムとは異なり、リビジョンはリビジョン番号では識別されません。
各リビジョンは、SHA1という強く暗号化された41文字のハッシュ値によって識別されます。

.. index::
   single: Commit; 変更をコミットする

変更をコミットする
------------------

変更はローカルリポジトリにコミットできます。
他の一般的なソース管理システムとは異なり、編集を開始する前にファイルをチェックアウトをする必要はありません。
変更を開始するだけで、行われたすべての変更は後からコミットダイアログで確認することができます。
コミットダイアログを開くと、すべての変更は画面左上部に列挙されます。

.. image:: /images/commit_dialog.png

変更には3種類の状態があります。

+----------+----------------------------------------------------------------------------------------------------------------+
|Untracked | このファイルはまだGitに追加されていません。                                                                    |
|          | これはおそらく、新しいファイルか、もしくは以前にGitにコミットされたことがないファイルです。                    |
+----------+----------------------------------------------------------------------------------------------------------------+
|Modified  | このファイルは最後にコミットされた以降に変更されています。                                                     |
+----------+----------------------------------------------------------------------------------------------------------------+
|Deleted   | このファイルは削除されています。                                                                               |
+----------+----------------------------------------------------------------------------------------------------------------+

ファイル名を変更したり、ファイルを移動したりすると、Gitはファイルが移動されたことを検知しますが、今のところGit Extensionsはそれらをコミットダイアログに表示しません。
ファイルの変更を元に戻したい場合があるでしょう。
ステージングされていないファイルのコンテキストメニューから行うことができます。

.. image:: /images/reset_changes.png

最初のコミットまでに、おそらく、追跡されたくないたくさんのファイルがあるでしょう。
それらのファイルは、ステージングしないことによって無視することもできますが、毎回表示されてしまいます。
リポジトリ中の .gitignore というファイルにそれらを追加することもできます。
``.gitignore`` に追加されたファイルは、コミットダイアログに再び表示されることはありません。
コミットダイアログの ``作業ディレクトリの変更点`` メニューで ``無視されたファイルを編集する`` を選択することで、 ``.gitignore`` のエディターを開くことができます。

.. image:: /images/show_untracked.png

コミットしたいファイルを ``ステージに追加`` ボタンを押してステージングする必要があります。
ステージングするのは、ファイルではなく変更であるため、削除したファイルもステージングする必要があります。
コミットしたいすべての変更をステージングしたら、コミットメッセージを入力し、コミットボタンを押します。

.. image:: /images/commit_dialog_commit.png

``コミットのやり直し`` を使用することにより、最後のコミットにファイルを追加することもできます。
これは、いくつかの変更を忘れてしまった時に非常に便利です。
この操作は歴史を書き換えます。最後のコミットを消し、追加の変更を含めて再度コミットを行います。
そのコミットが他の開発者へ公開されていない場合にのみ ``コミットのやり直し`` を使用するように気をつけてください。

コミットメッセージをチェックするための、スペルチェッカーの機能があります。
スペルを間違っている単語は、赤の波線で下線が引かれます。
スペルをミスしている単語上で右クリックすることにより、正しいスペルや、その他のオプションを選択したりできます。	

.. image:: /images/commit_dialog_spellchecker.png

Git Extensionsは、デフォルトで多くの辞書をインストールします。
スペルチェッカーのコンテキストメニューや、設定のダイアログで他の辞書を選択することができます。
新しいスペル辞書を追加するには、Git Extensionsのインストールディレクトリ中の ``Dictionaries`` フォルダに辞書ファイルを追加します。

.. image:: /images/commit_dialog_language.png

.. index::
   single: Commit; コミットのCherry pick

コミットのCherry pick
---------------------

コミットは、チェリーピック機能を使用して、再コミットすることができます。
これは、同じ変更を、複数のブランチに適用する場合に非常に便利です。

.. image:: /images/cherry_pick.png

.. index::
   single: Commit; コミットのRevert

コミットのRevert
----------------

コミットが公開されると、削除することはできません。
コミットによる変更をやり直す必要がある場合、その変更を打ち消す新しいコミットを作成する必要があります。
これはコミットの ``Revert`` と呼ばれます。

.. image:: /images/revert_commit.png

.. index::
   single: Commit; 変更のStash

変更のStash
-----------

まだコミットしたくないローカルでの変更があり、それを捨てたくない場合、それらを一時的にstashすることができます。
featureで作業中に、何か別の作業を数時間行わなければならない場合に便利です。
変更をstashしておいて、後から再度ワーキングディレクトリに適用することができます。
Stashは、一般的には非常に短い時間について使用されます。

.. image:: /images/stash_dialog.png

必要であれば、複数のStashを作成することができます。
Stashは、コミットログに ``[stash]`` というテキストと共に表示されます。

.. image:: /images/commit_log_stash.png

Stashは、変更の入った(dirty)作業ディレクトリに、リモートの変更をpullしてくる際に特に有効です。
もし、より恒久的なstash領域が必要な場合、ブランチを作るのがよいでしょう。
