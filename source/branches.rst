Branches
========

.. image:: /images/branch.png
    :align: right

ブランチは、他のコミットとは切り離した変更をコミットする際に使われます。
次回のリリースに間に合うかどうかが不明な、ある機能についての作業を開始する時にブランチを作成するのが一般的です。
右の画像は、ブランチをBのコミット時点で作成したことを示しています。

Gitでは、ブランチは非常に頻繁に作成されます。
ブランチを作成するのは非常に簡単であり、頻繁にブランチを作成することは推奨されています。
実際、リポジトリをクローンしてコミットを行う場合に新しいブランチを作ります。
このことについてはpullの章で説明します。

どのブランチで作業しているのかは、ツールバーで確認できます。

.. image:: /images/branch_name.png

.. index::
   single: Branch; ブランチの作成

ブランチの作成
--------------

Git Extensionsで新しいブランチを作成するには、複数の方法があります。
下の画像では、コミットログのコンテキストメニューから新しいブランチを作成しています。
これは、選択されたリビジョンから新しいブランチを作成します。

.. image:: /images/new_branch.png

``Refactor`` という名前のブランチを作成します。
このブランチでは、他の人の作業を考慮せずに作業することができます。
ブランチを作成してすぐにチェックアウトするオプションを指定するチェックボックスが ``ブランチの作成`` ダイアログにあります。

.. image:: /images/create_branch_dialog.png

ブランチを作成すると、コミットログに ``Refactor`` という新しいブランチが表示されます。
このブランチをチェックアウトすることを選択した場合、次回以降のコミットは新しいブランチに対してコミットされます。

.. image:: /images/refactor_branch.png

Gitでのブランチの作成には、リポジトリ中でたったの41バイトしかスペースを使用しません。
新しいブランチの作成は、とても簡単で、非常に高速です。
Gitのワークフローは、ブランチとマージに最適化されています。

.. index::
   single: Branch; 独立したブランチ

独立したブランチ
^^^^^^^^^^^^^^^^

特別なケースでは、独立したブランチを作成すると便利です。
(例えば、次の検索結果を確認してください。 https://www.google.com/search?q=why+use+orphan+branches+in+git )
``Orphan`` にチェックを入れることで、独立したブランチを作成できます。(gitコマンドでは ``--orphan`` オプション)

新しく作成されたブランチは、親コミットを持ちません。

``Clear`` (Remove files from the working tree and from the index)オプション(``git rm -rf``)はデフォルトで有効になっています。
そのため、作業ディレクトリとインデックスはクリアされます。
もし、そのオプションを外せば、作業ディレクトリとインデックスはそのままになります。

.. index::
   single: Branch; ブランチのチェックアウト

ブランチのチェックアウト
------------------------

checkoutコマンドを使用することで、現在のブランチから別のブランチに切り替えることができます。
ブランチをチェックアウトすると、現在のブランチを切り替え、作業ディレクトリ中のファイルを更新します。
作業ディレクトリ内でコミットされていない変更は上書きされる可能性があるので、作業ディレクトリがクリーンであることを確認してください。。

.. image:: /images/checkout_branch.png

.. index::
   single: Branch; ブランチのマージ

ブランチのマージ
----------------

下の画像には、``[Refactor]`` と ``[master]`` という2つのブランチがあります。
masterブランチからRefactorブランチにコミットをマージすることができます。
これを行った場合、Refactorブランチはmasterブランチの内容で更新されますが、その逆はありません。
Refactorブランチで作業してる限り、masterブランチそのものに手を加えることはできません。
masterブランチのソースを現在のブランチにマージすることはできますが、masterブランチには変更を加えることはできません。

.. image:: /images/merge1.png

Refactorブランチをmasterブランチにマージするためには、まずmasterブランチに切り替える必要があります。

.. image:: /images/merge2.png

masterブランチに切り替え後、 ``Gitコマンド`` のメニューから ``ブランチのマージ`` を選択することでマージを行えます。
マージダイアログでは、現在の作業ブランチを確認することができます。
マージしたいブランチを選択後、 ``マージ`` ボタンをクリックします。

.. image:: /images/merge_dialog.png

マージ後、コミットログには新しいマージコミットが表示されます。
このマージによって、Refactorブランチには変更が加えられていないことに注意して下さい。
Refactorブランチでの作業を続けたい場合、masterブランチをRefactorブランチにマージすることもできます。
Refactorブランチが不要になったのであれば、削除することもできます。

.. image:: /images/merge3.png

.. note::

	無名ブランチのマージをする必要がある場合、tagを使用して一時的に名前を付けることができます。

.. index::
   single: Branch; ブランチのRebase

ブランチのRebase
----------------

rebaseコマンドは、Gitで最も複雑なコマンドです。
rebaseコマンドはマージコマンドとよく似ています。
rebaseとマージのどちらも、ブランチに最新の内容を取得するために使われます。
主な違いは、rebaseを使用することで、マージの履歴を線形に維持できることにあります。

.. image:: /images/rebase1.png

Refactorブランチでmasterブランチでrebaseすると以下のような動作になります。

* Refactorブランチの全コミットを一時領域に退避させる
* Refactorブランチを削除する
* masterブランチの内容でRefactorブランチを再度作成する
* 新しいRefactorブランチに全コミットを再度コミットする

rebase中のマージで競合が発生する可能性があります。
rebaseされた各コミットについて、競合を解消する必要があります。
Git Extensionsは、rebase作業中に、rebaseが成功するまでの必要な全ての手順をガイドします。

.. image:: /images/rebase_dialog.png

下の画像は、rebase後のコミットログの状態を表しています。
歴史が書き換えられているため、Refactorブランチの各コミットがmasterブランチの各コミットの後に行われているように見えることに注意してください。

.. image:: /images/rebase2.png

.. warning::

    この操作は歴史を書き換えるため、他のリポジトリに公開されていないブランチでのみ使うようにしてください。
    すでにpushされているブランチでrebaseを行うと、リモートからのpullやpushが難しくなります。
    すでに最新の状態で公開されているブランチに対しては、マージするようにしてください。

.. index::
   single: Branch; ブランチの削除

ブランチの削除
--------------

一般的に、ブランチは数多く作成されます。
もはや必要なくなったブランチや、ブランチ上で行った作業を保持したくない場合には、ブランチを削除することができます。
マージされていないブランチを削除する場合、全てのコミットは失われます。
他のブランチにマージされたブランチを削除しても、マージされたコミットは既に別のブランチの一部になっているため、失われることはありません。

ブランチを削除するには、 ``Gitコマンド`` メニューの ``ブランチの削除`` を使用します。
他のブランチにマージされていないブランチを削除したい場合には、 ``強制削除`` のチェックボックスにチェックを入れる必要があります。

.. image:: /images/delet_branch.png
