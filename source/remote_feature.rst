.. index::
   single: Remote feature

Remote feature
==============

Gitは、分散型ソース管理システムです。
これは、あなたの行った変更はすべてローカルなものだということです。
変更をコミットすると、ローカルリポジトリにのみコミットされます。
ローカルの変更を公開したい場合、pushする必要があります。
他の人がコミットした変更を取り込む場合には、pullする必要があります。

.. index::
   single: Remote feature; リモートリポジトリの管理

リモートリポジトリの管理
------------------------

``リモート`` メニューからリモートリポジトリを管理することができます。

.. image:: /images/manage_remote_repositories.png

公開されているリポジトリからリポジトリのクローンを行った場合、リモートは既に設定されています。
識別しやすくするため、リモートの名前を変更することができます。
クローン後のデフォルトの名前は ``origin`` です。
SSHのクライアントとしてPuTTYを使用する場合、各リモートに対しての秘密鍵を設定することもできます。
Git Extensionsは必要に応じて鍵をロードします。
秘密鍵の作成方法については、次の段落で説明します。

.. image:: /images/remote_repositories.png

``デフォルトのpullの振る舞い`` タブでは、デフォルトでpullしたりマージしたりする必要のあるブランチを設定できます。
これが正しく設定されている場合、pullやpush時にブランチを選択する必要がありません。
ダイアログには2つのボタンがあります。

+-------------------------------------------------+---------------------------------------------------+
|Prune(リモートで削除されたブランチ情報を削除)    | 既にリモートに存在しないブランチの情報を捨てる。  |
+-------------------------------------------------+---------------------------------------------------+
|Update(すべてのリモートのブランチ情報を更新する) | すべてのリモートブランチの情報を取得する。        |
+-------------------------------------------------+---------------------------------------------------+

|

.. image:: /images/remote_repositories2.png

リポジトリをクローンした後に、全てのリモートブランチを手動で設定する必要はありません。
代わりに、リモートブランチをチェックアウトして、ローカルのトラッキングブランチを作成するという選択肢もあります。

.. index::
   single: Remote feature; SSH鍵の作成

SSH鍵の作成
-----------

Gitでは、プライベートリポジトリにアクセスするためにSSHを使用しています。
SSHは、認証のために秘密鍵／公開鍵のペアを使用します。
これは、秘密鍵と公開鍵を作成する必要があることを意味します。
秘密鍵はローカルのコンピュータに保存され、公開鍵は誰にでも渡すことができます。
SSHは、秘密鍵を使用して送信する内容を暗号化します。
受信側は、公開鍵を使用して送信データの復号を行います。

この暗号化は、データそのものを保護することはありませんが、データの送信元の真性を保護します。
秘密鍵は、送信者のみが使用可能なため、受信者はデータの出どころを確認することができます。
実際に、鍵のペアは認証のプロセスにのみ使用されます。
データ自体は、この初期化処理中に交換される鍵を用いて暗号化されます。


PuTTYとgithub
^^^^^^^^^^^^^

PuTTYは、OpenSSHよりは多少ユーザーフレンドリーなWindows用のSSHクライアントです。
残念ながら、PuTTYは全てのサーバーに対しては動作しません。
この段落では、PuTTYを使用してgithub用のSSHKeyを生成する方法を解説します。

まず、Git ExtensionsがPuTTYを使用するように設定され、すべてのパスが正しいことを確認してください。

.. image:: /images/github_ssh.png

.. image:: /images/generate_or_import_key.png

``キーの生成／インポート`` を選択することで、キーの生成を開始できます。

+--------------------------------------------+---------------------------------------------+
|.. image:: /images/putty_key_generator1.png | .. image:: /images/putty_key_generator2.png |
+--------------------------------------------+---------------------------------------------+

PuTTYは、よりランダムな鍵を生成するために、マウスをぐるぐる回すことを要求します。
鍵が生成されると、公開鍵と秘密鍵をファイルに保存することができます。
秘密鍵はパスワードで保護をすることができますが、必須ではありません。

これで鍵のペアができました。githubに公開鍵を登録する必要があります。
``Account Settings`` ページの ``SSH Keys`` タブから登録できます。
複数の鍵を登録することもできますが、全リポジトリにアクセスするのには最低1つの鍵が必要です。

.. image:: /images/account_settings.png

復号用の公開鍵をgithubに登録したら、Git Extensionsに暗号化用の秘密鍵を登録する必要があります。
クローンダイアログに、PuTTYの認証エージェントに秘密鍵を読みこませるための ``SSH鍵の読み込み`` ボタンがあります。
これは、手動でPuTTYの認証エージェントを起動し、システムトレイのコンテキストメニューから ``add key`` を選択することでも可能です。

.. image:: /images/putty_agent.png

Git Extensionsは、リモートと通信する際に自動的に秘密鍵を読み込みます。
リモートに対して、秘密鍵を設定しておく必要があります。

これは、 ``リモートリポジトリの管理`` ダイアログから行うことができます。

OpenSSHとgithub
^^^^^^^^^^^^^^^

OpenSSHを使う選択をした場合、以下のスクリーンショットにあるようにGit Extensionsを設定する必要があります。

.. image:: /images/github_openssh.png

OpenSSHは最高のSSHクライアントですが、Windowsのサポートが弱いです。
そのため、使用するには少し複雑です。
他の欠点としては、Git ExtensionsがOpenSSHを制御できないので、OpenSSHが使われる可能性がある場合にはコマンドラインダイアログを表示する必要があることです。
Git Extensionsは、SSH接続が要求されそうな全コマンドについて、コマンドラインのウィンドウを表示します。
このような理由のため、Git ExtensionsではPuTTYをSSHクライアントとして好みます。

OpenSSHで鍵のペアを生成するためには、コマンドラインを使用します。
あらかじめOpenSSHへのパスが設定されているため、git bashの使用を推奨します。

.. image:: /images/git_bash_toolbar.png

次のコマンドを実行します: ``ssh-keygen -C "your@email.com" -t rsa``  
Emailアドレスには、gitで使用しているアドレスと同じ物を設定します。
秘密鍵をパスワードで保護するかどうかを尋ねられますが、これは必須ではありません。
デフォルトでは、秘密鍵と公開鍵は ``C:\Documents and Settings\[User]\.ssh\`` もしくは、 ``C:\Users\[user]\.ssh\`` に保存されます。

.. image:: /images/ssh_bash.png

OpenSSHが秘密鍵を読み込むため、Git Extensionsに秘密鍵を登録する必要はありません。
それでは、メモ帳で公開鍵を開いて、その鍵をgithubにコピーしましょう。
これは `GitHub <http://www.github.com>`_ の ``Account Settins`` ページで ``SSH Keys`` タブから行えます。

.. image:: /images/ssh_folder.png

.. index::
   single: Remote feature; 変更のPull

変更のPull
----------

pullという機能を利用して、リモートの変更を取り込むことができます。
変更をpullする前に、ローカルリポジトリにコミットされていない変更がないことを確認剃る必要があります。
コミットしていない変更がある場合、それらをコミットするか、pullする間、stashしておく必要があります。
stashの使い方については、Stashの章を参照してください。

.. image:: /images/pull_toolbar.png

個人リポジトリを最新に保つためには、リモートリポジトリから変更をfetchする必要があります。
それは、 ``Pull`` ダイアログを使用して行うことができます。
ダイアログを開くと、現在のブランチに対するデフォルトのリモートがセットされています。
他のリモートを選択することもできますし、望むのであればカスタムURLを入力することもできます。
リモートブランチが正しく設定されている場合、リモートブランチを選択する必要はありません。

リモートリポジトリからコミットのfetchのみ行い、既にローカルリポジトリにいくつかのコミットを行なっている場合、コミットは別のブランチに含まれます。
pullダイアログでは、左側の画像に示されます。
これは、自身の変更とマージする前に、それらの変更をレビューしたい場合に有効です。

.. image:: /images/pull_dialog.png

変更をfetch後にリモートブランチをマージすることを選択した場合、ブランチが作成され、コミットがマージされます。
これを行うと、たくさんのブランチとマージが作成され、履歴を読むのを難しくします。

.. image:: /images/pull_dialog2.png

fetchしたコミットとローカルのコミットをマージする代わりに、fetchされたコミットの次からローカルコミットをrebaseすることもできます。
これは、下の図の左側の画像で示されています。
rebaseは、まずローカルのコミット(CとD)を取り消します。
それからリモートのコミット(E)をfetchし、最終的にローカルのコミットを再コミットします。
rebase中にマージの競合が発生した場合、rebaseのダイアログが表示されます。

.. image:: /images/pull_dialog3.png

Pullボタンの隣に、いくつかの便利なボタンがあります。

+-----------------+--------------------------------------------------------------------------------------------------------+
|競合の解決       | マージの競合が発生した場合、このボタンを押すことで解消できます。                                       |
+-----------------+--------------------------------------------------------------------------------------------------------+
|変更の一時退避   | 作業ディレクトリにコミットされてない変更がある場合、pullする前に一時退避しておく必要があります。       |
+-----------------+--------------------------------------------------------------------------------------------------------+
|自動で一時退避   | pullする前にstashしたい場合はこのチェックボックスにチェックを入れます。stashはpull後に再適用されます。 |
+-----------------+--------------------------------------------------------------------------------------------------------+
|SSH鍵の読み込み* | SSHクライアントとしてPuTTYを使用する場合にのみこのボタンは有効になります。                             |
|                 | このボタンを押すと、リモートに設定された鍵を読み込むことができます。                                   |
|                 | 鍵が設定されていない場合、鍵を指定するためのダイアログが表示されます。                                 |
+-----------------+--------------------------------------------------------------------------------------------------------+

.. note::
	* (訳注)Git Extensions 2.44には SSH鍵の読み込みボタンは存在しない



.. index::
   single: Remote feature; 変更のPush

変更のPush
----------

browseウィンドウで、まだリモートリポジトリにpushされていないローカルのコミットがあるかどうかを確認することができます。
下の画像で、緑のラベルはリモートリポジトリのマスターブランチの位置を指しています。
赤いラベルは、ローカルリポジトリのマスターブランチの位置を指しています。
ローカルブランチは3コミット分先に進んでいます。

.. image:: /images/push1.png

変更をpushするには、ツールバー上の ``Push`` を押します。

.. image:: /images/push_toolbar.png

Pushダイアログでは、push先のリモートリポジトリを選択することができます。
リモートリポジトリには、現在のブランチのリモートがセットされています。
その他のリモートを選択することもできますし、push先のURLを選択することもできます。
pushするブランチを指定することもできます。

.. image:: /images/push_dialog.png

タグはリモートリポジトリにpushされません。
タグをpushしたい場合、ダイアログの ``タグのPush`` タブを開く必要があります。
単一のタグや、すべてのタグをpushするように選ぶことができます。
``タグのPush`` タブが選択されている場合はタグのみがpushされ、コミットはpushされません。

リモートリポジトリで変更をマージすることはできません。
マージはローカルで行われる必要があります。
これは、ローカルでマージされていないコミットはpushできないことを意味します。
実際、ほとんどの場合、pushする前にpullする必要があります。

